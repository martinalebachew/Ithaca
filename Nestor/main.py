# main.py
# (C) Martin Alebachew, 2023
# Nestor â€” RavKav Traffic Analysis Reports [ PROJECT ITHACA ]

from docx import Document
from docx.shared import Cm
from datetime import datetime

version = "0.1"


def intro():
    print(f"""                                      
         ,--.                                                  
       ,--.'|                        ___                       
   ,--,:  : |                      ,--.'|_                     
,`--.'`|  ' :                      |  | :,'   ,---.    __  ,-. 
|   :  :  | |            .--.--.   :  : ' :  '   ,'\ ,' ,'/ /| 
:   |   \ | :   ,---.   /  /    '.;__,'  /  /   /   |'  | |' | 
|   : '  '; |  /     \ |  :  /`./|  |   |  .   ; ,. :|  |   ,' 
'   ' ;.    ; /    /  ||  :  ;_  :__,'| :  '   | |: :'  :  /   
|   | | \   |.    ' / | \  \    `. '  : |__'   | .; :|  | '    
'   : |  ; .''   ;   /|  `----.   \|  | '.'|   :    |;  : |    
|   | '`--'  '   |  / | /  /`--'  /;  :    ;\   \  / |  , ;    
'   : |      |   :    |'--'.     / |  ,   /  `----'   ---'     
;   |.'       \   \  /   `--'---'   ---`-'                     
'---'          `----'                                          

      RavKav Traffic Analysis Reports | Project Ithaca
               (C) Martin Alebachew, 2023
                       Version {version}
""")


class Template:
    class In:
        width = [Cm(size) for size in (1.25, 1.25, 11.6, 0.8, 0.8)]
        headerText = ('NO', 'DIR', 'Data', 'SW1', 'SW2')

    class Out:
        width = [Cm(size) for size in (1.25, 1.25, 1, 1, 0.8, 0.8, 0.8, 8, 0.8)]
        headerText = ('NO', 'DIR', 'CLA', 'INS', 'P1', 'P2', 'Lc', 'Data', 'Le')


class Report:
    def __init__(self, date, title, author):
        # Create a document
        self.__document = Document()
        self.__addInfo(date, title, author)

    def __addInfo(self, date, title, author):
        self.__document.add_heading('RavKav Traffic Analysis Report', 1)
        self.__document.add_paragraph(
            f'{title}, recorded by {author}\n'
            f'Generated by Nestor {version} on {date}')

    def addRecord(self, direction, packet):
        if direction == 'in' or direction == '>':
            self.__addRecordIn(packet)
        elif direction == 'out' or direction == '<':
            self.__addRecordOut(packet)
        else:
            raise ValueError

    def addRecordTable(self, type):
        # Fetch constants according to type
        if type == 'in':
            consts = Template.In

        elif type == 'out':
            consts = Template.Out

        else:
            raise ValueError

        # Add table
        table = self.__document.add_table(rows=3, cols=len(consts.width), style="Table Grid")
        table.allow_autofit = False

        # Set widths and texts of header row
        cells = table.rows[0].cells  # Header row, zero-based index
        for i, cell in enumerate(cells):
            cell.width = consts.width[i]
            cell.text = consts.headerText[i]

        # TODO: specify direction in second row

        # Merge notes row
        cells = table.rows[2].cells  # Notes row, zero-based index
        firstCell = cells[0]
        lastCell = cells[len(cells) - 1]
        firstCell.merge(lastCell)
        firstCell.text = "Notes: ..."
        return table

    def __addRecordIn(self, packet):
        self.addRecordTable('in')

    def __addRecordOut(self, packet):
        self.addRecordTable('out')

    def save(self, filepath):
        self.__document.save(filepath)


def main():
    intro()
    report = Report(datetime.now().strftime("%B %d, %Y at %H:%M:%S"), "Charging RavKav", "Martin Alebachew")
    report.addRecord(">", "boom!")
    report.addRecord("<", "boom!")
    report.save("/Users/martin/Documents/Coding/Ithaca/Nestor/generated_doc.docx")


if __name__ == '__main__':
    main()
